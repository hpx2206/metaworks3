<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  Copyright 2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">

    <!-- General description of your web application -->

    <display-name>ProcessCodi_metaworks3</display-name>

    <description>
    </description>

    <!-- Servlet definitions for the servlets that make up
         your web application, including initialization
         parameters.  With Tomcat, you can also send requests
         to servlets not listed here with a request like this:

           http://localhost:8080/{context-path}/servlet/{classname}

         but this usage is not guaranteed to be portable.  It also
         makes relative references to images and other resources
         required by your servlet more complicated, so defining
         all of your servlets (and defining a mapping to them with
         a <servlet-mapping> element) is recommended.

         Servlet initialization parameters can be retrieved in a
         servlet or JSP page by calling:

             String value =
               getServletConfig().getInitParameter("name");

         where "name" matches the <param-name> element of
         one of these initialization parameters.

         You can define any number of servlets, including zero.
    -->
    
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext.xml</param-value>
	</context-param>
	
	 <!-- CODI Spring Logger -->
	<!-- <context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener> -->
	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- Spring Request Filter for servlet 2.4 higher -->    
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
    <!-- 
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	<servlet>
		<servlet-name>QuartzInitializer</servlet-name>
		<servlet-class>org.quartz.ee.servlet.QuartzInitializerServlet</servlet-class>
		<init-param>
			<param-name>shutdown-on-unload</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>start-scheduler-on-load</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet>
 		<servlet-name>JobScheduler</servlet-name> 
 		<servlet-class>org.uengine.scheduler.JobScheduler</servlet-class>
 		<load-on-startup>2</load-on-startup>
 	</servlet>
 -->
 	<!-- CODI Spring ServletDispatcher -->
 	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/applicationContext.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	

	<servlet>
		<servlet-name>fakejnlp</servlet-name>
		<jsp-file>/wih/codiReplyHandler/documentInvoker/DocumentInvoker_JNLP.jsp</jsp-file>
	</servlet>
	<servlet-mapping>
		<servlet-name>fakejnlp</servlet-name>
		<url-pattern>/wih/codiReplyHandler/documentInvoker/DocumentInvoker.jnlp</url-pattern>
	</servlet-mapping>

 	<servlet>
		<servlet-name>fakejnlp2</servlet-name>
		<jsp-file>/wih/applicationHandler/ApplicationInvoker_JNLP.jsp</jsp-file>
	</servlet>
	<servlet-mapping>
		<servlet-name>fakejnlp2</servlet-name>
		<url-pattern>/uengine-web/wih/applicationHandler/ApplicationInvoker.jnlp</url-pattern>
	</servlet-mapping>

 	<servlet>
		<servlet-name>fakejnlp3</servlet-name>
		<jsp-file>/processmanager/ProcessDesigner_JNLP.jsp</jsp-file>
	</servlet>
	<servlet-mapping>
		<servlet-name>fakejnlp3</servlet-name>
		<url-pattern>/processmanager/ProcessDesigner.jnlp</url-pattern>
	</servlet-mapping>
	
	<!-- metaworks3 -->
  <servlet>
    <servlet-name>dwr-invoker</servlet-name>
    <servlet-class>org.metaworks.dwr.TransactionalDwrServlet</servlet-class>
    <init-param>
      <param-name>useSpring</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>accessLogLevel</param-name>
      <param-value>CALL</param-value>
    </init-param>
    <init-param>
      <param-name>debug</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>activeReverseAjaxEnabled</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>initApplicationScopeCreatorsAtStartup</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>jsonRpcEnabled</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>jsonpEnabled</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>preferDataUrlSchema</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <param-name>maxWaitAfterWrite</param-name>
      <param-value>-1</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>dwr-invoker</servlet-name>
    <url-pattern>/dwr/*</url-pattern>
  </servlet-mapping>

    <session-config>
      <session-timeout>1440</session-timeout>    <!-- 30 minutes -->
    </session-config>
    
    <error-page>
		<error-code>500</error-code>
		<location>/common/callback/errorpage.jsp</location>
	</error-page>

	<welcome-file-list>
		<welcome-file>login.html</welcome-file>
		<welcome-file>loginForm.jsp</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

</web-app>
